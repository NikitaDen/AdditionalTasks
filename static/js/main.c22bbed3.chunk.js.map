{"version":3,"sources":["images/avatar.jpg","components/Message/Message.jsx","components/Message/MessageContainer.jsx","components/Advantages/Advantages.jsx","components/Advantages/AdvantagesContainer.jsx","components/Names/NamesSpan/NamesSpan.jsx","components/Names/NamesButton/NamesButton.jsx","components/Names/NamesInput/NamesInput.jsx","components/Names/NamesItem/NamesItem.jsx","components/Names/Names.jsx","components/Navbar/Navbar.jsx","App.jsx","serviceWorker.js","redux/user-reducer.js","redux/redux-store.js","index.jsx"],"names":["module","exports","Message","props","className","src","userPhoto","alt","fullName","messageText","messageTime","MessageContainer","connect","state","user","Advantages","advantages","map","item","key","id","advantage","AdvantagesContainer","NamesSpan","number","NamesButton","onClick","text","onClickEvent","clsName","setCls","NamesInput","cls","onBlur","type","value","placeholder","onKeyDown","e","setText","onChange","currentTarget","NamesItem","names","name","Names","useState","setNumber","setNames","validated","setValidated","Navbar","to","App","path","render","Boolean","window","location","hostname","match","initialState","userReducer","reducers","combineReducers","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c22bbed3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.196b2cc3.jpg\";","import React from \"react\";\r\nimport userPhoto from \"../../images/avatar.jpg\";\r\n\r\nlet Message = (props) => {\r\n    return (\r\n        <div className='message'>\r\n            {/* eslint-disable-next-line jsx-a11y/img-redundant-alt */}\r\n            <img src={userPhoto} alt=\"photo\" className=\"user-photo\"/>\r\n            <div className=\"message__body\">\r\n                {props.fullName}\r\n                <p>{props.messageText}</p>\r\n                <div className=\"message__time\">{props.messageTime}</div>\r\n            </div>\r\n            <div className=\"triangle\"/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Message;","import Message from \"./Message\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst stateToProps = (state) => {\r\n    return {\r\n        fullName: state.user.fullName,\r\n        messageText: state.user.messageText,\r\n        messageTime: state.user.messageTime,\r\n    }\r\n};\r\n\r\nconst MessageContainer = connect(stateToProps, null)(Message);\r\n\r\nexport default MessageContainer;","import React from \"react\";\r\n\r\nlet Advantages = (props) => {\r\n    return (\r\n        <div className='advantages'>\r\n            <h3>My Advantages</h3>\r\n            <div className={'list'}>\r\n                {props.advantages.map(item => <p key={item.id} className={item.className}>{item.advantage}</p>)}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Advantages;","import {connect} from \"react-redux\";\r\nimport Advantages from \"./Advantages\";\r\n\r\nconst stateToProps = (state) => {\r\n    return {\r\n        advantages: state.user.advantages,\r\n    }\r\n};\r\n\r\nconst AdvantagesContainer = connect(stateToProps, null)(Advantages);\r\n\r\nexport default AdvantagesContainer;","import React from \"react\";\r\n\r\nlet NamesSpan = (props) => {\r\n    return (\r\n        <span>{props.number}</span>\r\n    )\r\n};\r\n\r\nexport default NamesSpan;","import React from \"react\";\r\n\r\nlet NamesButton = (props) => {\r\n\r\n    const handleEvent = () => {\r\n        if (!props.text) {\r\n            let clsName = !props.text ? 'non-validate' : 'validate';\r\n            props.setCls(clsName);\r\n        } else {\r\n            props.onClickEvent();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <button onClick={handleEvent}>Press</button>\r\n    )\r\n};\r\n\r\nexport default NamesButton;","import React from \"react\";\r\n\r\nlet NamesInput = (props) => {\r\n\r\n    const handleEnter = (e) => {\r\n        if (e.key === 'Enter') {\r\n\r\n            if (!props.text) {\r\n                return null;\r\n            }\r\n\r\n            props.onClickEvent();\r\n            props.setText('');\r\n        }\r\n    };\r\n\r\n    const setNewText = (e) => {\r\n        props.setText(e.currentTarget.value);\r\n        props.setCls('validate');\r\n    };\r\n\r\n    const setClassName = () => {\r\n        let clsName = !props.text ? 'non-validate' : 'validate';\r\n        props.setCls(clsName);\r\n    };\r\n\r\n    return (\r\n        <input className={props.cls} onBlur={setClassName} type=\"text\" value={props.text} placeholder={'Input name...'}\r\n               onKeyDown={handleEnter} onChange={setNewText}/>\r\n    )\r\n};\r\n\r\nexport default NamesInput;","import React from \"react\";\r\n\r\nlet NamesItem = (props) => {\r\n    return (\r\n        <div>\r\n            {props.names.map(item => {\r\n                return (\r\n                    <div key={item.id} className='names__item'>\r\n                        <h4>{item.name}</h4>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default NamesItem;","import React, {useState} from \"react\";\r\nimport NamesSpan from \"./NamesSpan/NamesSpan\";\r\nimport NamesButton from \"./NamesButton/NamesButton\";\r\nimport NamesInput from \"./NamesInput/NamesInput\";\r\nimport NamesItem from \"./NamesItem/NamesItem\";\r\n\r\n\r\nlet Names = () => {\r\n    let [number, setNumber] = useState(0);\r\n    let [text, setText] = useState('');\r\n    let [names, setNames] = useState([]);\r\n    let [validated, setValidated] = useState(true);\r\n    let [cls, setCls] = useState('validate');\r\n\r\n\r\n    let onClickEvent = () => {\r\n        setNumber(number + 1);\r\n        setNames([...names, {name: text, id: number}]);\r\n        setText('');\r\n    };\r\n\r\n    return (\r\n        <div className='names'>\r\n            <NamesSpan number={number}/>\r\n            <NamesInput cls={cls} setCls={setCls} validated={validated} setValidated={setValidated} onClickEvent={onClickEvent} text={text} setText={setText}/>\r\n            <NamesButton cls={cls} setCls={setCls} validated={validated} setValidated={setValidated} onClickEvent={onClickEvent} text={text}/>\r\n            <NamesItem names={names}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Names;","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nlet Navbar = () => {\r\n    return (\r\n        <div className='navbar'>\r\n            <NavLink to={'/monday'}>\r\n                <p>Monday</p>\r\n            </NavLink>\r\n            <NavLink to={'/tuesday'}>\r\n                <p>Tuesday</p>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Navbar;","import React from 'react';\nimport './styles/styles.scss';\nimport MessageContainer from \"./components/Message/MessageContainer\";\nimport AdvantagesContainer from \"./components/Advantages/AdvantagesContainer\";\nimport Names from \"./components/Names/Names\";\nimport {Route} from \"react-router-dom\";\nimport Navbar from \"./components/Navbar/Navbar\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n\n            <Navbar/>\n\n            <Route path={'/monday'} render={() =>\n                <>\n                    <MessageContainer/>\n                    <AdvantagesContainer/>\n                    <Names/>\n                </>\n            }/>\n\n            <Route path={'/tuesday'} render={() =>\n                <>\n                </>\n            }/>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let initialState = {\r\n    fullName: 'Nikita Denisov',\r\n    messageText: 'Hi, myyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy name is Nikita, and i\\'d like to show some presentation about me. There is some of my advantages, check it out!',\r\n    messageTime: '23:04',\r\n    advantages: [\r\n        {advantage: 'I', className: 'advantages__item', id: 1},\r\n        {advantage: 'don\\'t', className: 'advantages__item advantages__item--super', id: 2},\r\n        {advantage: 'know', className: 'advantages__item', id: 3},\r\n        {advantage: 'I\\'m', className: 'advantages__item', id: 4},\r\n        {advantage: 'too', className: 'advantages__item', id: 5},\r\n        {advantage: 'shy', className: 'advantages__item', id: 6},\r\n    ]\r\n};\r\n\r\nconst userReducer = (state = initialState, action) => {\r\n    return state;\r\n};\r\n\r\nexport default userReducer;","import {combineReducers, createStore} from \"redux\";\r\nimport userReducer from \"./user-reducer\";\r\n\r\nconst reducers = combineReducers({\r\n    user: userReducer,\r\n});\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/redux-store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}